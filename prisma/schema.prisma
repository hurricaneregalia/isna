// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model RegisterForm {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  placeholder String
  position    Int      @default(0)
  row         Int      @default(0)
  options     String? // JSON atau comma-separated value untuk radio/select
  required    Boolean  @default(false)
  hint        String? // teks keterangan di bawah input
  hintTrue    String   @default("")
  hintFalse   String   @default("")
  isActive    Boolean  @default(true)
  createDate  DateTime @default(now())
  updateDate  DateTime @updatedAt
}

model ApiList {
  id         Int      @id @default(autoincrement())
  name       String
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt
}

model FacebookPixel {
  id           Int      @id @default(autoincrement())
  pixelId      String // Facebook Pixel ID
  campaignName String // Nama event yang terjadi
  createdAt    DateTime @default(now()) // Waktu data dimasukkan
  updatedAt    DateTime @updatedAt // Waktu data terakhir diperbarui
}

model SiteIdentity {
  id          String        @id @default(cuid())
  siteName    String
  tagline     String?
  description String?
  keywords    Json?
  logoUrl     String        @default("")
  ogImage     String?
  faviconUrl  String        @default("/favicon.ico")
  email       String?
  phone       String?
  address     String?
  socialLinks SocialLinks[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model SocialLinks {
  id               String        @id @default(cuid())
  platform         String?
  url              String?
  platformUsername String?
  identity         SiteIdentity? @relation(fields: [identityId], references: [id])
  identityId       String? // jadikan optional
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
}

model Page {
  id            String    @id @default(cuid())
  slug          String    @unique
  name          String
  title         String
  description   String?
  keywords      Json?
  ogTitle       String?
  ogDescription String?
  ogImage       String?
  sections      Section[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Section {
  id             String      @id @default(cuid())
  name           String?
  page           Page        @relation(fields: [pageId], references: [id])
  pageId         String
  type           SectionType
  title          String
  subTitle       String?
  description    String?
  additionalText String?
  image          String?
  video          String?
  icon           String?
  order          Int // untuk pengurutan section
  listItems      ListItem[]
}

model ListItem {
  id          String       @id @default(cuid())
  section     Section      @relation(fields: [sectionId], references: [id])
  sectionId   String
  type        ListItemType
  title       String
  description String?
  entries     ListEntry[] // ganti items jadi relasi
}

model ListEntry {
  id          String   @id @default(cuid())
  listItem    ListItem @relation(fields: [listItemId], references: [id])
  listItemId  String
  title       String
  price       Int?
  description String?
  icon        String?
  image       String?
}

enum ListItemType {
  BASIC // hanya title, icon, items
  DETAILED // dengan description
}

enum SectionType {
  NORMAL
  HERO
  IMAGE
  VIDEO
  LIST
  CTA
  CUSTOM
}

model Product {
  id            String                @id @default(cuid())
  sku           String                @unique
  name          String
  slug          String                @unique
  description   String?
  bestFor       String?
  image         String?
  price         Float
  proccessTime  Int?
  inStock       Boolean               @default(true)
  status        ProductStatus         @default(ACTIVE)
  categoryId    String
  keywords      Json?
  quality       Int
  isBest        Boolean               @default(false)
  category      Category              @relation(fields: [categoryId], references: [id])
  tags          Tag[]                 @relation("TagsOnProducts")
  gallery       ProductGallery[]
  benefits      ProductBenefit[]
  benefitPoints ProductBenefitPoint[]
  promotions    Promotion[]           @relation("ProductPromotions")
  vouchers      Voucher[]             @relation("VoucherProducts")
  orders        Order[]               @relation("OrderProducts")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

enum ProductStatus {
  ACTIVE // Produk tersedia dan aktif
  SUSPENDED // Produk dihentikan sementara
  INACTIVE // Produk tidak tersedia
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  products Product[] @relation("TagsOnProducts")
}

model ProductGallery {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  imageUrl  String // URL gambar produk
  order     Int // Urutan gambar dalam galeri
  createdAt DateTime @default(now())
}

model Benefit {
  id          String           @id @default(cuid())
  title       String
  description String?
  icon        String?
  products    ProductBenefit[]
}

model ProductBenefit {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  benefit   Benefit @relation(fields: [benefitId], references: [id])
  benefitId String
  isActive  Boolean @default(true)
  order     Int     @default(0)
}

model ProductBenefitPoint {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  text      String // manfaat yang ditampilkan
  order     Int // untuk urutan tampilan
  icon      String? // optional, jika ingin pakai icon/emoji
}

model Promotion {
  id          String    @id @default(cuid())
  name        String // nama promo
  slug        String?
  description String? // penjelasan promo
  type        PromoType // diskon, bonus, dll
  value       Float? // contoh: 10 (10%) atau 50000 (Rp50rb)
  isActive    Boolean   @default(true)
  startDate   DateTime
  endDate     DateTime
  products    Product[] @relation("ProductPromotions")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PromoType {
  PERCENTAGE // Diskon persen (%)
  FIXED // Potongan harga tetap (Rp)
  BONUS_ITEM // Bonus item
  FREE_SHIPPING // Gratis ongkir
  CUSTOM // Bebas, bisa deskripsi sendiri
}

model Voucher {
  id          String         @id @default(cuid())
  code        String         @unique
  description String?
  type        PromoType
  value       Float
  usageLimit  Int?
  usedCount   Int            @default(0)
  isActive    Boolean        @default(true)
  startDate   DateTime
  endDate     DateTime
  products    Product[]      @relation("VoucherProducts")
  usages      VoucherUsage[]
  orders      Order[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model VoucherUsage {
  id        String   @id @default(cuid())
  voucher   Voucher  @relation(fields: [voucherId], references: [id])
  voucherId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  usedAt    DateTime @default(now())

  @@unique([voucherId, userId]) // âœ… 1 user tidak bisa pakai voucher yang sama 2x
}

model User {
  id            String          @id @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  userName      String?
  email         String          @unique
  password      String          @default("$2b$10$3Ej03NYQNLkjNREoINw7NOcnYhvz1V7lPXoZdpMEnkiHxN4Cq9WhO")
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(CUSTOMER)
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  vouchers      VoucherUsage[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Order {
  id         String      @id @default(cuid())
  email      String // email pembeli (guest atau login)
  name       String? // nama pembeli (optional)
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
  products   Product[]   @relation("OrderProducts")
  voucher    Voucher?    @relation(fields: [voucherId], references: [id])
  voucherId  String?
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Menu {
  id        String   @id @default(cuid())
  title     String
  slug      String
  type      MenuType
  order     Int
  icon      String?
  parentId  String? // ðŸ‘ˆ submenu akan isi ini
  parent    Menu?    @relation("SubMenus", fields: [parentId], references: [id])
  children  Menu[]   @relation("SubMenus")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MenuType {
  HEADER
  FOOTER
  SIDEBAR
}

model FooterInfo {
  id    String         @id @default(cuid())
  label String
  value String
  type  FooterInfoType // CONTACT, SOCIAL, LEGAL, etc
  icon  String?
  order Int
}

enum FooterInfoType {
  CONTACT
  SOCIAL
  LEGAL
  CUSTOM
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model LandingPage {
  id              String          @id @default(uuid())
  name            String // siteName
  slug            String          @unique
  description     String
  keywords        String? // simpan array sebagai JSON string
  ogImage         String? // NEW: untuk open graph
  themeId         Int? // foreign key (opsional, tergantung apakah wajib pilih theme)
  theme           Theme?          @relation(fields: [themeId], references: [id])
  image           String
  component       String?
  socialLinks     SocialLink[]    @relation("LandingPageSocialLinks") // NEW
  lpFor           LpFor[]         @relation("LandingPageLpFor")
  lpContentTypes  LpContentType[] @relation("LandingPageLpContentType")
  lpDesignStyle   LpDesignStyle?  @relation(fields: [lpDesignStyleId], references: [id])
  lpDesignStyleId String?
  ctas            Cta[]           @relation("LandingCta")
  marketingTools  String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model LpFor {
  id           String        @id @default(uuid())
  description  String?
  landingPages LandingPage[] @relation("LandingPageLpFor")
}

model Cta {
  id           String        @id @default(uuid())
  description  String
  landingPages LandingPage[] @relation("LandingCta")
}

model LpContentType {
  id           String        @id @default(uuid())
  type         String
  order        Int?
  landingPages LandingPage[] @relation("LandingPageLpContentType")
}

model LpDesignStyle {
  id          String        @id @default(uuid())
  name        String        @unique
  description String
  templates   LandingPage[]
}

model SocialLink {
  id               String       @id @default(uuid())
  platform         String
  url              String?
  platformUsername String?
  landingPage      LandingPage? @relation("LandingPageSocialLinks", fields: [landingPageId], references: [id])
  landingPageId    String?
}

model Theme {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  landingPages LandingPage[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

//npx prisma migrate dev   
//npx prisma generate
//npx prisma studio
//node prisma/seed.js
//npm run export:data
//node scripts/download-images.js

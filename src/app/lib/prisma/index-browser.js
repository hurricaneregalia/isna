
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.RegisterFormScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  placeholder: 'placeholder',
  position: 'position',
  row: 'row',
  options: 'options',
  required: 'required',
  hint: 'hint',
  hintTrue: 'hintTrue',
  hintFalse: 'hintFalse',
  isActive: 'isActive',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.ApiListScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.FacebookPixelScalarFieldEnum = {
  id: 'id',
  pixelId: 'pixelId',
  campaignName: 'campaignName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteIdentityScalarFieldEnum = {
  id: 'id',
  siteName: 'siteName',
  tagline: 'tagline',
  description: 'description',
  keywords: 'keywords',
  logoUrl: 'logoUrl',
  ogImage: 'ogImage',
  faviconUrl: 'faviconUrl',
  email: 'email',
  phone: 'phone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialLinksScalarFieldEnum = {
  id: 'id',
  platform: 'platform',
  url: 'url',
  platformUsername: 'platformUsername',
  identityId: 'identityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PageScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  title: 'title',
  description: 'description',
  keywords: 'keywords',
  ogTitle: 'ogTitle',
  ogDescription: 'ogDescription',
  ogImage: 'ogImage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  pageId: 'pageId',
  type: 'type',
  title: 'title',
  subTitle: 'subTitle',
  description: 'description',
  additionalText: 'additionalText',
  image: 'image',
  video: 'video',
  icon: 'icon',
  order: 'order'
};

exports.Prisma.ListItemScalarFieldEnum = {
  id: 'id',
  sectionId: 'sectionId',
  type: 'type',
  title: 'title',
  description: 'description'
};

exports.Prisma.ListEntryScalarFieldEnum = {
  id: 'id',
  listItemId: 'listItemId',
  title: 'title',
  price: 'price',
  description: 'description',
  icon: 'icon',
  image: 'image'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  slug: 'slug',
  description: 'description',
  bestFor: 'bestFor',
  image: 'image',
  price: 'price',
  proccessTime: 'proccessTime',
  inStock: 'inStock',
  status: 'status',
  categoryId: 'categoryId',
  keywords: 'keywords',
  quality: 'quality',
  isBest: 'isBest',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug'
};

exports.Prisma.ProductGalleryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  imageUrl: 'imageUrl',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.BenefitScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  icon: 'icon'
};

exports.Prisma.ProductBenefitScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  benefitId: 'benefitId',
  isActive: 'isActive',
  order: 'order'
};

exports.Prisma.ProductBenefitPointScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  text: 'text',
  order: 'order',
  icon: 'icon'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  value: 'value',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoucherScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  type: 'type',
  value: 'value',
  usageLimit: 'usageLimit',
  usedCount: 'usedCount',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoucherUsageScalarFieldEnum = {
  id: 'id',
  voucherId: 'voucherId',
  userId: 'userId',
  usedAt: 'usedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  userName: 'userName',
  email: 'email',
  password: 'password',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuthenticatorScalarFieldEnum = {
  credentialID: 'credentialID',
  userId: 'userId',
  providerAccountId: 'providerAccountId',
  credentialPublicKey: 'credentialPublicKey',
  counter: 'counter',
  credentialDeviceType: 'credentialDeviceType',
  credentialBackedUp: 'credentialBackedUp',
  transports: 'transports'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  userId: 'userId',
  voucherId: 'voucherId',
  totalPrice: 'totalPrice',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  type: 'type',
  order: 'order',
  icon: 'icon',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FooterInfoScalarFieldEnum = {
  id: 'id',
  label: 'label',
  value: 'value',
  type: 'type',
  icon: 'icon',
  order: 'order'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.LandingPageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  lpDesignStyleId: 'lpDesignStyleId',
  marketingTools: 'marketingTools',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LpForScalarFieldEnum = {
  id: 'id',
  description: 'description'
};

exports.Prisma.LpContentTypeScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.LpDesignStyleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.SectionType = exports.$Enums.SectionType = {
  NORMAL: 'NORMAL',
  HERO: 'HERO',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  LIST: 'LIST',
  CTA: 'CTA',
  CUSTOM: 'CUSTOM'
};

exports.ListItemType = exports.$Enums.ListItemType = {
  BASIC: 'BASIC',
  DETAILED: 'DETAILED'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  INACTIVE: 'INACTIVE'
};

exports.PromoType = exports.$Enums.PromoType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED',
  BONUS_ITEM: 'BONUS_ITEM',
  FREE_SHIPPING: 'FREE_SHIPPING',
  CUSTOM: 'CUSTOM'
};

exports.UserRole = exports.$Enums.UserRole = {
  CUSTOMER: 'CUSTOMER',
  ADMIN: 'ADMIN'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  SHIPPED: 'SHIPPED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.MenuType = exports.$Enums.MenuType = {
  HEADER: 'HEADER',
  FOOTER: 'FOOTER',
  SIDEBAR: 'SIDEBAR'
};

exports.FooterInfoType = exports.$Enums.FooterInfoType = {
  CONTACT: 'CONTACT',
  SOCIAL: 'SOCIAL',
  LEGAL: 'LEGAL',
  CUSTOM: 'CUSTOM'
};

exports.Prisma.ModelName = {
  RegisterForm: 'RegisterForm',
  ApiList: 'ApiList',
  FacebookPixel: 'FacebookPixel',
  SiteIdentity: 'SiteIdentity',
  SocialLinks: 'SocialLinks',
  Page: 'Page',
  Section: 'Section',
  ListItem: 'ListItem',
  ListEntry: 'ListEntry',
  Product: 'Product',
  Category: 'Category',
  Tag: 'Tag',
  ProductGallery: 'ProductGallery',
  Benefit: 'Benefit',
  ProductBenefit: 'ProductBenefit',
  ProductBenefitPoint: 'ProductBenefitPoint',
  Promotion: 'Promotion',
  Voucher: 'Voucher',
  VoucherUsage: 'VoucherUsage',
  User: 'User',
  Authenticator: 'Authenticator',
  Order: 'Order',
  Menu: 'Menu',
  FooterInfo: 'FooterInfo',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  LandingPage: 'LandingPage',
  LpFor: 'LpFor',
  LpContentType: 'LpContentType',
  LpDesignStyle: 'LpDesignStyle'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
